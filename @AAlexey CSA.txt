HW
Client_Server
1) Прочиать про клиент-серверную архитектуру

2) Что ткое HTTP и HTTPS

Протокол передачи гипертекста , посредством которого обмениваются клиент и сервер 
HTTPS секьюрный протокол который использует протокол шифрования TLS основанный на асимметричном шифровании данных , пришел на смену устаревшему ssl протоколу. Используется для безопасной передачи данных.

3) HTTP методы

GET запрос предоставление ресурса.Может только извлекать данные   
POST отправляет данные на сервер 
PUT заменяет данные на ресурсе 
DELETE удаляет указанный ресурс
OPTIONS описывает параметры соединения с ресурсом
HEAD запрос как и GET ,в ответе приходят тоько заголовки ,без тела.
PATCH частично изменяет ресурс
CONNECT настраивает туннель с сервером
TRACE вызывает возвращаемое текстовое сообщение ресурса

4) HTTP статус коды сервера

1хх информационные 
2хх об успешной обработке запроса 
3хх перенаправление  
4хх клиентские ошибки 
5хх ошибки на стороне сервера

5) Что такое ядро браузера 

Представляет собой программу преобразования содержимого веб-страниц (HTML,XML, цифровые изображения )
 и информацию о форматировании (CSS,XSL) в интерактивное изображение форматированного содержимого на экране.

6) Какие браузеры какиие ядра используют

Blink - ядро браузера Chromium . Используют Google Chrome, Edge,Opera Vivaldi.
Gecko- открытое ядро Mozilla. Firefox.
WebKit- ядро для браузера Safari(apple) и браузера Chrome (до 2013г)


7) Что такое API 

Это программный интерфейс который помогает приложениям (в том числе фрнту и бэку) общаться между собой .

8. Что такое ендпоинты
Это путь/адрес/url ресурса на который будет отправляться запрос
 
9) URL (URI, URL, URN)

URL унифицированный указатель ресурса - адрес веб ресурса ,показывает где находится веб страница\приложение..
Состоит из :
1. Схемы - протокол по которому будут передаваться данные .
2. Имя хоста(доменное имя) и порт - доменное имя или ip адрес сервера
3. Путь - месторасположение ресурса,похоже на путь к файлу в файловой системе
4. Параметры запроса -доп параметры запроса вида ключ=значение ,перечисляются 
после знака "?" и разделяются "&"
5.Якорь\фрагмент текста - дополнительный указатель позволяет сразу попасть 
в нужную часть веб страницы

URN имя ресурса в сети ,определяет только название ресурса ,но не говорит 
как к нему подключится 

URI имя и адрес ресурса ,включает в себя url и urn 

10) Идемпотентные HTTP методы

При повторном выполнении запроса, со второго запроса,результаты ожидаемо одинаковые 
GET/HEAD/PUT/DELETE/OPTIONS/TRACE
 
Неидемпотентные - при повторном запросе результаты будут меняться 
POST/PATCH

11) Безопасные HTTP методы

Это методы которые не меняют данные на сервере , можно выполнять их в любой последовательности .
GET/HEAD/OPTION

12) Иденфикация - процесс распознания пользователя по его идентификатору

    Аутентификация - проверка подлинности ,доказательство что ползователь именно тот за кого себя выдает

    Авторизация - предоставление определенных прав. 


13) Что такое IP 

Интернет протокол - уникальный числовой идентификатор устройства в сети 

14) Что такое октаты в DNS
Ip состоиз из четырех частей записаных в виде десятичных чисел ,каджую из них называют окетатми.
DNS система доменных имен , которая хранит ip адреса всех интернет ресурсов , и при запросе с браузера url  преобразует его  и отправляет ip сервиса 
15) Что такое порт, сколько портов у Linux сервера

индифицируемый номером системный ресурс ,выделяемый приложению ,выполняемому 
на некотором сетевом хосте, для связи с приложениями,выполняемыми на других 
сетевых хостах .

16) Уровни OSI
1 уровень. Физический (physical). Единицей нагрузки (PDU) здесь является бит. Кроме единиц и нулей физический уровень не знает ничего. На этом уровне работают провода, патч панели, сетевые концентраторы (хабы, которые сейчас уже сложно найти в привычных нам сетях), сетевые адаптеры. Именно сетевые адаптеры и ничего более из компьютера. Сам сетевой адаптер принимает последовательность бит и передает её дальше.

2 уровень. Канальный (data link). PDU - кадр (frame). На этом уровне появляется адресация. Адресом является MAC адрес. Канальный уровень ответственен за доставку кадров адресату и их целостность. В привычных нам сетях на канальном уровне работает протокол ARP. Адресация второго уровня работает только в пределах одного сетевого сегмента и ничего не знает о маршрутизации - этим занимается вышестоящий уровень. Соответственно, устройства, работающие на L2 - коммутаторы, мосты и драйвер сетевого адаптера.

3 уровень. Сетевой (network). PDU пакет (packet). Наиболее распространенным протоколом (дальше не буду говорить про “наиболее распространенный” - статья для новичков и с экзотикой они, как правило,  не сталкиваются) тут является IP. Адресация происходит по IP-адресам, которые состоят из 32 битов. Протокол маршрутизируемый, то есть пакет способен попасть в любую часть сети через какое-то количество маршрутизаторов. На L3 работают маршрутизаторы.

4 уровень. Транспортный (transport). PDU сегмент (segment)/датаграмма (datagram). На этом уровне появляются понятия портов. Тут трудятся TCP и UDP. Протоколы этого уровня отвечают за прямую связь между приложениями и за надежность доставки информации. Например, TCP умеет запрашивать повтор передачи данных в случае, если данные приняты неверно или не все. Так же TCP может менять скорость передачи данных, если сторона приема не успевает принять всё (TCP Window Size).

Следующие уровни “правильно” реализованы лишь в RFC. На практике же, протоколы описанные на следующих уровнях работают одновременно на нескольких уровнях модели OSI, поэтому нет четкого разделения на сеансовый и представительский уровни. В связи с этим в настоящее время основным используемым стеком является TCP/IP, о котором поговорим чуть ниже.

5 уровень. Сеансовый (session). PDU данные (data). Управляет сеансом связи, обменом информации, правами. Протоколы - L2TP, PPTP.

6 уровень. Представительский (presentation). PDU данные (data). Преставление и шифрование данных. JPEG, ASCII, MPEG.

7 уровень. Прикладной (application). PDU данные (data). Самый многочисленный и разнообразный уровень. На нем выполняются все высокоуровненвые протоколы. Такие как POP, SMTP, RDP, HTTP и т.д. Протоколы здесь не должны задумываться о маршрутизации или гарантии доставки информации - этим занимаются нижестоящие уровни. На 7 уровне необходима лишь реализации конкретных действий, например получение html-кода или email-сообщения конкретному адресату.

17) Хедеры http запросов
Заголовки HTTP являются основной частью этих HTTP-запросов и ответов, и они несут информацию о браузере клиента, запрошенной странице, сервере и многом другом.

Host
HTTP-запрос отправляется на определенные IP-адреса. Но так как большинство серверов способны размещать несколько сайтов под одним IP, они должны знать, какое доменное имя ищет браузер.

User-Agent
Этот заголовок может содержать несколько частей информации, таких как:

Имя и версия браузера.
Название и версия операционной системы.
Язык по умолчанию.
Именно так веб-сайты могут собирать определённую общую информацию о своих системах surfers. Например, они могут определить, использует ли surfer  мобильный браузер и перенаправляет их на мобильную версию своего веб-сайта, который лучше работает с низким разрешением.

Accept-Language
Этот заголовок отображает настройки языка по умолчанию.   Если сайт имеет разные языковые версии, он может перенаправить нового surfer на основе этих данных.

Он может содержать несколько языков, разделённых запятыми. Первый - это предпочтительный язык, и каждый из перечисленных языков может иметь значение «q», которое представляет собой оценку предпочтения пользователя для языка (min. 0 max. 1).

Accept-Encoding
Большинство современных браузеров поддерживают gzip и отправляют это в header. Затем веб-сервер может отправить выходной HTML-код в сжатом формате. Это позволяет уменьшить размер до 80% для экономии пропускной способности и времени.

If-Modified-Since
Если веб-документ уже сохранен в кеше в браузере и вы посещаете его снова, ваш браузер может проверить, был ли документ обновлён.Если он не изменялся с этой даты, сервер отправляет код ответа «304 Not Modified», а содержимое - нет, и браузер загружает содержимое из cache.

Cookie
Как следует из названия, это отправляет файлы cookie, хранящиеся в вашем браузере для этого домена.

Referer
Как следует из названия, этот HTTP header содержит ссылочный url.

Например, если я зашел на домашнюю страницу Nettuts + и нажал ссылку на статью, этот header будет отправлен в мой браузер.

Authorization
Когда веб-страница запрашивает авторизацию, браузер открывает окно входа в систему. Когда вы вводите имя пользователя и пароль в этом окне, браузер отправляет другой HTTP-запрос, но на этот раз он содержит этот header,Данные внутри header имеют кодировку base64. Например, base64_decode ('bXl1c2VyOm15cGFzcw ==') возвратит 'myuser: mypass'.


Заголовки HTTP в ответах HTTP

Cache-Control
Определение из w3.org: «Поле заголовка Cache-Control используется для указания директив, которые ДОЛЖНЫ выполняться всеми механизмами кэширования по цепочке запросов/ответов». Эти «механизмы кэширования» включают шлюзы и прокси, которые может использовать ваш интернет-провайдер.

Content-Type
Этот header указывает "mime-type" документа. Затем браузер определяет, как интерпретировать содержимое на основании этого

Content-Disposition
Этот header указывает браузеру открыть окно загрузки файла, вместо того, чтобы пытаться проанализировать содержимое.

Content-Length
Когда контент будет передаваться браузеру, сервер может указать его размер (в байтах), используя этот header.

Etag
Это еще один header, который используется для кеширования. Веб-сервер может отправлять этот header с каждым документом, который он обслуживает. Значение может быть основано на последней изменённой дате, размере файла или даже контрольной сумме файла. Браузер затем сохраняет это значение, так как он кэширует документ. 

Last-Modified
Как следует из названия, этот header указывает дату последнего изменения документа в формате GMT.

Location
Этот заголовок используется для перенаправления. Если код ответа 301 или 302, сервер также должен отправить этот header.

Set-Cookie
Когда веб-сайт хочет установить или обновить файл cookie в вашем браузере, он будет использовать этот header.

WWW-Authenticate
Сайт может отправить этот header для аутентификации пользователя через HTTP. Когда браузер увидит этот header, он откроет диалоговое окно входа в систему.

Content-Encoding
Этот header обычно устанавливается, когда возвращаемое содержимое сжимается.

